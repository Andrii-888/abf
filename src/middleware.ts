// src/middleware.ts
import createMiddleware from "next-intl/middleware";
import type { NextRequest } from "next/server";
import { NextResponse } from "next/server";

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ª–æ–∫–∞–ª–∏
const locales = ["en", "it", "ru", "de", "fr", "zh"] as const;
type Locale = (typeof locales)[number];
const LOCALES_SET = new Set<Locale>(locales as unknown as Locale[]);
const DEFAULT_LOCALE: Locale = "en";

// –ë–∞–∑–æ–≤–∞—è –º–∏–¥–ª–≤–∞—Ä—å next-intl (–±–µ–∑ –∞–≤—Ç–æ-–¥–µ—Ç–µ–∫—Ü–∏–∏)
const intlMiddleware = createMiddleware({
  locales: locales as unknown as string[],
  defaultLocale: DEFAULT_LOCALE,
  localeDetection: false,
});

// –ë—ã—Å—Ç—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—É—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–∏–¥–ª–≤–∞—Ä—å –Ω–µ –¥–æ–ª–∂–Ω–∞ —Ç—Ä–æ–≥–∞—Ç—å
function shouldBypass(pathname: string) {
  if (pathname.startsWith("/api")) return true;
  if (pathname.startsWith("/_next")) return true;
  // favicon/robots/sitemap –∏ –ª—é–±—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
  if (pathname === "/favicon.ico" || pathname === "/robots.txt" || pathname === "/sitemap.xml") {
    return true;
  }
  if (/\/.*\.[^/]+$/.test(pathname)) return true;
  return false;
}

// –†–∞–∑–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ª–æ–∫–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ø—É—Ç—å –° –≤–µ–¥—É—â–∏–º —Å–ª–µ—à–æ–º
function extractLocalePrefix(pathname: string): { locale?: Locale; rest: string } {
  for (const l of locales) {
    if (pathname === `/${l}`) return { locale: l, rest: "/" };
    if (pathname.startsWith(`/${l}/`)) {
      const rest = pathname.slice(l.length + 1); // –æ—Ç—Ä–µ–∑–∞–µ–º "/<l>"
      return { locale: l, rest: rest.startsWith("/") ? rest : `/${rest}` };
    }
  }
  return { rest: pathname || "/" };
}

export default function middleware(req: NextRequest) {
  const { nextUrl } = req;
  const url = nextUrl.clone();
  const { pathname } = url;

  // 1) –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–µ/—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏
  if (shouldBypass(pathname)) {
    return NextResponse.next();
  }

  // 2) –†—É—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏ —á–µ—Ä–µ–∑ ?lang=
  const qpLang = url.searchParams.get("lang") as Locale | null;
  if (qpLang && LOCALES_SET.has(qpLang)) {
    const { locale: currentLocale, rest } = extractLocalePrefix(pathname);

    // –¶–µ–ª–µ–≤–æ–π –ø—É—Ç—å (–≤—Å–µ–≥–¥–∞ —Å –≤–µ–¥—É—â–∏–º —Å–ª–µ—à–æ–º), –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ lang
    const cleanSearch = new URLSearchParams(url.searchParams);
    cleanSearch.delete("lang");

    const targetPath = currentLocale ? `/${qpLang}${rest}` : `/${qpLang}${pathname}`;
    url.pathname = targetPath.replace(/\/{2,}/g, "/");
    url.search = cleanSearch.toString() ? `?${cleanSearch.toString()}` : "";

    if (url.toString() !== nextUrl.toString()) {
      return NextResponse.redirect(url);
    }
    return NextResponse.next();
  }

  // 3) –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è next-intl –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
  return intlMiddleware(req);
}

// üîí –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –º–∏–¥–ª–≤–∞—Ä–∏:
// ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å ("/"), —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å defaultLocale
// ‚Äî –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –ª–æ–∫–∞–ª–µ–π ("/en/...","/ru/...", –∏ —Ç.–¥.)
// –ù–∏–∫–∞–∫–∏—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö lookahead‚Äô–æ–≤ ‚Äî –º–µ–Ω—å—à–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ Edge.
export const config = {
  matcher: ["/", "/(en|it|ru|de|fr|zh)/:path*"],
};
